/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import domain.Rezervacija;
import domain.StatusRezervacije;
import domain.StavkaRezervacije;
import domain.Sto;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logic.Controller;
import model.ModelTabeleStavkaRezervacije;
import model.ModelTabeleStolovi;

/**
 *
 * @author Djapac
 */
public class FrmIzmeniStavkuRez extends javax.swing.JFrame {
    Rezervacija izabranaRez;
    List<StavkaRezervacije> listaStavki;
    List<Sto> listaStolova;

    /**
     * Creates new form FrmIzmeniStavkuRez
     */
    public FrmIzmeniStavkuRez() {
        initComponents();
        setLocationRelativeTo(null);
    }


    FrmIzmeniStavkuRez(Rezervacija r) {
        initComponents();
        setLocationRelativeTo(null);
        this.izabranaRez = r;
        listaStavki = vratiStavke();
        izabranaRez.setListaStavki(listaStavki);
        ModelTabeleStavkaRezervacije mtsr = new ModelTabeleStavkaRezervacije(listaStavki);
        tblStavkaRez.setModel(mtsr);
        mtsr.updateTable(listaStavki);
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        String formattedDate = izabranaRez.getDatumOd().format(dateFormatter);
        txtDatum.setText(formattedDate);
        
        
        
        popuniTabelu();
        popuniStatuse();
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStavkaRez = new javax.swing.JTable();
        btnIzadji1 = new javax.swing.JButton();
        btnIzmeniStavku = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblStolovi = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbStatus = new javax.swing.JComboBox<>();
        btnKonkretno = new javax.swing.JButton();
        btnIzbaciStavku = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Izmeni datum: ");

        tblStavkaRez.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblStavkaRez);

        btnIzadji1.setText("Izađi");
        btnIzadji1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzadji1ActionPerformed(evt);
            }
        });

        btnIzmeniStavku.setText("Pošalji izmenu");
        btnIzmeniStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniStavkuActionPerformed(evt);
            }
        });

        tblStolovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblStolovi);

        jLabel2.setText("Stolovi: ");

        jLabel3.setText("Izmeni status rezervacije: ");

        cbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnKonkretno.setText("Izmeni konkretnu stavku");
        btnKonkretno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKonkretnoActionPerformed(evt);
            }
        });

        btnIzbaciStavku.setText("Izbaci stavku");
        btnIzbaciStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzbaciStavkuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 13, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnIzadji1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnKonkretno, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnIzbaciStavku, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnIzmeniStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(btnIzmeniStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(btnKonkretno, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnIzbaciStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnIzadji1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIzadji1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzadji1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnIzadji1ActionPerformed

    private void btnIzmeniStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniStavkuActionPerformed
        try {
            // TODO add your handling code here:
            
            if(listaStavki.isEmpty()){
                JOptionPane.showMessageDialog(this, "Prazna lista stavki!" ,"Greška", JOptionPane.ERROR_MESSAGE);
                return;
            }
            izabranaRez.setListaStavki(listaStavki);
            Controller.getInstance().updateReservation(izabranaRez);
            
            JOptionPane.showMessageDialog(this, "Sistem je izmenio rezervaciju!", "Izmena podataka rezervacije", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (Exception ex) {
           JOptionPane.showMessageDialog(this, "Sistem ne može da izmeni rezervaciju" ,"Greška", JOptionPane.ERROR_MESSAGE);
        }
                
            
            
                
        
    }//GEN-LAST:event_btnIzmeniStavkuActionPerformed

    private void btnKonkretnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKonkretnoActionPerformed
        // TODO add your handling code here:
        
        int red = tblStavkaRez.getSelectedRow();
        int redSto = tblStolovi.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita podatke o odabranoj stavci", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            try {
                ModelTabeleStolovi mts = (ModelTabeleStolovi) tblStolovi.getModel();
                Sto s = mts.getSto(redSto);
             
                ModelTabeleStavkaRezervacije mtsr = (ModelTabeleStavkaRezervacije) tblStavkaRez.getModel();
                StavkaRezervacije st = mtsr.getStavkaRezervacije(red);
        
                
                String datumStr = txtDatum.getText().trim();
                DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                
                LocalDate datum = LocalDate.parse(datumStr, dateFormatter);
                
                
                st.setSto(s);
                st.setDatumRezervacije(datum);
                st.setStatus(StatusRezervacije.IZMENJENA);
                
                for(StavkaRezervacije stavka : listaStavki){
                    if(stavka.getRedniBroj() == st.getRedniBroj()){
                        stavka.setSto(s);
                        stavka.setDatumRezervacije(datum);
                        stavka.setStatus(StatusRezervacije.IZMENJENA);
                        
                    }
                }
                
                
                JOptionPane.showMessageDialog(this, "Sistem je izmenio stavku rezervacije!", "Izmena podataka rezervacije", JOptionPane.INFORMATION_MESSAGE);
               
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da izmeni rezervaciju" ,"Greška", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        
        
    }//GEN-LAST:event_btnKonkretnoActionPerformed

    private void btnIzbaciStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzbaciStavkuActionPerformed
        // TODO add your handling code here:
        int red = tblStavkaRez.getSelectedRow();
        
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita podatke o odabranoj stavci", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            ModelTabeleStavkaRezervacije mtsr = (ModelTabeleStavkaRezervacije) tblStavkaRez.getModel();
                StavkaRezervacije st = mtsr.getStavkaRezervacije(red);
                st.setStatus(StatusRezervacije.OTKAZANA);
                
                for(StavkaRezervacije stavka : listaStavki){
                    if(stavka.getRedniBroj() == st.getRedniBroj()){
                        stavka.setStatus(StatusRezervacije.OTKAZANA);

                    }
                }
                
                
            JOptionPane.showMessageDialog(this, "Sistem je spremio stavku za otkazivanje!", "Brisanje podataka stavke rezervacije", JOptionPane.INFORMATION_MESSAGE);
        }
        
        
        
    }//GEN-LAST:event_btnIzbaciStavkuActionPerformed

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzadji1;
    private javax.swing.JButton btnIzbaciStavku;
    private javax.swing.JButton btnIzmeniStavku;
    private javax.swing.JButton btnKonkretno;
    private javax.swing.JComboBox<Object> cbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblStavkaRez;
    private javax.swing.JTable tblStolovi;
    private javax.swing.JTextField txtDatum;
    // End of variables declaration//GEN-END:variables

    private List<StavkaRezervacije> vratiStavke() {
        try {
            StavkaRezervacije sr = new StavkaRezervacije();
            sr.setRezervacija(izabranaRez);
            List<StavkaRezervacije> lista = Controller.getInstance().findReservationItems(sr);
            return lista;
           
        } catch (Exception ex) {
            Logger.getLogger(FrmIzmeniStavkuRez.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    private void popuniTabelu() {
        try {
            List<Sto> listaStolova = Controller.getInstance().getAllTables();
            ModelTabeleStolovi mts = new ModelTabeleStolovi(listaStolova);
            tblStolovi.setModel(mts);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Niste popunili tabelu");
            ex.printStackTrace();
        }
    }
    
     private void popuniStatuse() {
        cbStatus.removeAllItems();
        
        for(StatusRezervacije rs : StatusRezervacije.values()){
            cbStatus.addItem(rs);
            
        }
        cbStatus.setSelectedIndex(-1);
    }
    
}
